signature List where

data List :: Type -> Type

instance Semigroup (List a)
instance Monoid (List a)
instance Foldable List
instance Traversable List
instance Functor List

empty :: List a
singleton :: a -> List a
map :: (a -> b) -> List a -> List b
concat :: List (List a) -> List a
concatMap :: (a -> List b) -> List a -> List b
fromList :: [a] -> List a
